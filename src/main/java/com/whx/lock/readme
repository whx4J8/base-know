

java 中的锁

java上层中的锁

    互斥锁
        任何时间只允许一个线程进行读数据操作或者取数据操作,不允许其他线程进行读或者取操作
        机制:
                "读-读"互斥
                "读-写"互斥
                "写-写"互斥

    读写锁
        线程之间读读操作本身并没有相互影响,将读取操作都加上锁效率不高,
        同时真实的业务场景中,读取数据的操作次数通常高于写入数据的次数,所以只要在读-写\写-写上加锁,读-读不需要加锁
        机制:
            "读-读"不互斥
            "读-写"互斥
            "写-写"互斥

java互斥锁在jvm中的优化

    自旋锁

        互斥锁对性能最到的影响是阻塞的实现,挂起线程和恢复线程的操作读需要转入内核状态完成,这些操作给系统的并发能力带来很大的压力
        jvm开发者注意到这个问题,为了能让两个或者以上的线程同时并行执行,就让后边的线程稍等一会

        自旋锁非公平锁,不会按照进入lock的顺序进行获取锁
        特点:不进行thread状态的改变,响应速度更快,但当等待锁的线程数量不停增加,性能下降,因为每个线程都需要执行,占用cpu时间片
        场景:线程竞争不激烈,并且保持锁的时间短,适合使用自旋锁

        自动开启,默认10次,之后挂起

    适应性自旋锁


    偏向锁


    轻量级锁


    锁消除


    锁粗化

